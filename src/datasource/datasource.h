/*
 * This file is part of cve-check-tool
 *
 * Copyright Â© 2015-2016 Intel Corporation
 *
 * cve-check-tool is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * As an additional permission, the right to link to OpenSSL is granted.
 */

#pragma once

#define _GNU_SOURCE

#include <nica.h>
#include <stdbool.h>

#include "cve-config.h"

/**
 * The type of vulnerability information
 */
typedef enum {
        VULN_TYPE_MIN = 0,
        VULN_TYPE_CVE,
        VULN_TYPE_PRODUCT,
        VULN_TYPE_MAX
} VulnerabilityInfoType;

/**
 * Represents an actual CVE
 */
typedef struct CveInfo {
        char *cve_id;
        char *summary;
} CveInfo;

typedef struct ProductInfo {
        char *vendor;
        char *product;
        char *version;
} ProductInfo;
/**
 * Allow future expansion by way of different vulnerability informations
 */
typedef struct VulnerabilityInfo {
        VulnerabilityInfoType type;
        union {
                CveInfo cve;
                ProductInfo product;
        };
} VulnerabilityInfo;

/**
 * Free the vulnerability info
 */
void cve_free_vuln_info(VulnerabilityInfo *info);

DEF_AUTOFREE(VulnerabilityInfo, cve_free_vuln_info)

typedef NcArray VulnerabilityArray;

static inline void cve_free_vuln_array(VulnerabilityArray *array)
{
        nc_array_free(&array, (array_free_func)cve_free_vuln_info);
}

DEF_AUTOFREE(VulnerabilityArray, cve_free_vuln_array)

/**
 * Update the data source to the latest version(s)
 */
typedef bool (*cve_datasource_update)(bool force);

/**
 * Initialise this data source after set_basedir and (if implemented)
 * set_basedir have exited successfully
 */
typedef bool (*cve_datasource_init)(CveConfig *config);

/**
 * Destroy (cleanup) this datasource any any associated resources
 */
typedef void (*cve_datasource_destroy)(void);

/**
 * Some sources at some point may have used different schemas or paths which
 * are no longer compatible. In this instance they should perform a schema
 * bump, and provide a migration function to purge old, potentially broken,
 * data.
 *
 * This will always be called after set_basedir
 */
typedef bool (*cve_datasource_migrate)(CveConfig *config);

/**
 * Query a source with the data provided by ID
 */
typedef VulnerabilityArray *(*cve_datasource_query)(const char *);

typedef struct CveDatasource {
        const char *name;

        cve_datasource_init init;       /**< Initialise source */
        cve_datasource_update update;   /**< Update this source */
        cve_datasource_destroy destroy; /**< Uninitialise  source*/
        cve_datasource_migrate migrate; /**< Migration handler */
        cve_datasource_query query;     /**<Query a given ID */
} CveDatasource;

/*
 * Editor modelines  -  https://www.wireshark.org/tools/modelines.html
 *
 * Local variables:
 * c-basic-offset: 8
 * tab-width: 8
 * indent-tabs-mode: nil
 * End:
 *
 * vi: set shiftwidth=8 tabstop=8 expandtab:
 * :indentSize=8:tabSize=8:noTabs=true:
 */
