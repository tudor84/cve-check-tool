/*
 * This file is part of cve-check-tool
 *
 * Copyright Â© 2015-2016 Intel Corporation
 *
 * cve-check-tool is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * As an additional permission, the right to link to OpenSSL is granted.
 */

#pragma once

#include <sqlite3.h>
#include <stdarg.h>
#include <stdbool.h>

#include "nvd.h"

typedef enum {
        NSQL_TYPE_MIN = 0,
        NSQL_TYPE_STRING, /**<String type, STATIC in SQLite terms */
        NSQL_TYPE_INT,    /**<Basic int type */
        NSQL_TYPE_INT64,  /**<int64 type */
        NSQL_TYPE_MAX
} NvdSqlType;

/**
 * Storage type for use in nvd_prepare_statement
 */
typedef struct NvdSqlValue {
        NvdSqlType type; /**<Type of this value */
        union {
                const char *v_string; /**<String value */
                int v_int;            /**<Integer value (signed) */
                int64_t v_int64;      /**<Int64 value (signed) */
        };
} NvdSqlValue;

/**
 * Helper to create reference to stack-local NvdSqlValue of type NSQL_TYPE_STRING
 */
#define NSQL_VAL_STRING(c)                                                                         \
        &(NvdSqlValue)                                                                             \
        {                                                                                          \
                .type = NSQL_TYPE_STRING, .v_string = c                                            \
        }

/**
 * Helper to create reference to stack-local NvdSqlValue of type NSQL_TYPE_INT
 */
#define NSQL_VAL_INT(c)                                                                            \
        &(NvdSqlValue)                                                                             \
        {                                                                                          \
                .type = NSQL_TYPE_INT, .v_int = (int)c                                             \
        }

/**
 * Helper to create reference to stack-local NvdSqlValue of type NSQL_TYPE_INT64
 */
#define NSQL_VAL_INT64(c)                                                                          \
        &(NvdSqlValue)                                                                             \
        {                                                                                          \
                .type = NSQL_TYPE_INT64, .v_int64 = c                                              \
        }

/**
 * Prepare a statement with varadiac arguments.
 *
 * Each argument must be a pointer to an NvdSqlValue, and the list is terminated with
 * a NULL value
 */
__cve_hot__ bool nvd_prepare_statement_va(sqlite3_stmt *stmt, va_list va);

__attribute__((sentinel)) static inline bool nvd_prepare_statement(sqlite3_stmt *stmt, ...)
{
        va_list va;

        va_start(va, stmt);
        bool ret = nvd_prepare_statement_va(stmt, va);
        va_end(va);
        return ret;
}

/**
 * Make life easy! Load the INI file which will have prepared statements like:
 *
 * [transaction]
 * begin = BEGIN TRANSACTION;
 *
 * Later we can refer to this *prepared* statement as: transaction.begin
 * This is stored in the self.statements mapping
 */
bool nvd_init_statements(NvdDatasource *self);

/*
 * Editor modelines  -  https://www.wireshark.org/tools/modelines.html
 *
 * Local variables:
 * c-basic-offset: 8
 * tab-width: 8
 * indent-tabs-mode: nil
 * End:
 *
 * vi: set shiftwidth=8 tabstop=8 expandtab:
 * :indentSize=8:tabSize=8:noTabs=true:
 */
