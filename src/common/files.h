/*
 * This file is part of cve-check-tool
 *
 * Copyright Â© 2015-2016 Intel Corporation
 *
 * cve-check-tool is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * As an additional permission, the right to link to OpenSSL is granted.
 */

#pragma once

#include <nica.h>
#include <stdbool.h>
#include <stdint.h>
#include <sys/types.h>

#include "macros.h"

/**
 * Used to track an mmap()'d file's lifecycle. Never allocate one of these.
 * Instead, initialise a CveMappedFile as:
 *
 *      autofree(CveMappedFile) *file = CVE_MAPPED_FILE_INIT;
 *
 * This will ensure it is always cleaned up on scope-exit. There is no allocation
 * here, this is a pointer to a newly referenced stack object.
 */
typedef struct CveMappedFile {
        int fd;        /**< File descriptor for the mapped file */
        char *buffer;  /**< Pointer to the mmap()'d contents */
        size_t length; /**< Length of the mmap()'d file (see fstat) */
} CveMappedFile;

/**
 * Decompress a gzip'd file to the output path specified
 */
__cve_export__ bool cve_gunzip_file(const char *path, const char *out_path, mode_t mode);

/**
 * Compute the sha256sum for the given file path.
 *
 * @param path Path of the file to compute a hash sum for
 * @param buffer A buffer in which to store the resulting hash
 *
 * @return A newly allocated string with the hex sha256sum
 */
__cve_export__ char *cve_get_sha256sum(const char *path);

/**
 * Attempt to separate a key/value style value using the given separator
 *
 * On success, return a key/value mapping
 */
__cve_export__ NcHashmap *cve_parse_delim_file(const char *path, char sep);

/**
 * Close a previously mapped file
 */
__cve_export__ void cve_mapped_file_close(CveMappedFile *file);

/**
 * Open the given CveMappedFile to path and mmap the contents
 */
__cve_export__ bool cve_mapped_file_open(const char *path, CveMappedFile *file);

/**
 * Ensure a stack pointer vs a heap pointer, to save on copies
 */
#define CVE_MAPPED_FILE_INIT &(CveMappedFile){ 0 };

/**
 * Handy macro
 */
DEF_AUTOFREE(CveMappedFile, cve_mapped_file_close)

/*
 * Editor modelines  -  https://www.wireshark.org/tools/modelines.html
 *
 * Local variables:
 * c-basic-offset: 8
 * tab-width: 8
 * indent-tabs-mode: nil
 * End:
 *
 * vi: set shiftwidth=8 tabstop=8 expandtab:
 * :indentSize=8:tabSize=8:noTabs=true:
 */
